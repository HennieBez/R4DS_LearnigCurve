{
    "collab_server" : "",
    "contents" : "---\ntitle: \"R4DS\"\nauthor: \"Hennie Bezuidenhout\"\ndate: \"03 October 2016\"\noutput: word_document \n---\n# Programming in R Studio - Pipes\n## The point of the **Pipe** is to help us read our code in an easy to understand way!!\n### magrittr package - but all packages in tidyverse automatiically make \n\nWhen are we better off not using the *Pipe* ?\n\n (@) When **Pipes** are longer than ten steps (Rather create intermediate objects with meaningful names)\n (@) We have multiple *inputs* or *outputs* (the same solution as above applies)\n (@) When we are starting to think about a *directed graph* with a complex dependency structure\n \nRemember that the``%T>%``can assist us with more complex *Pipes* \n-Effectively, the **T-Pipe** returns the left-hand side instead of the right-hand side incase we want to plot or print\n\n# Introducing Functions \n## Allows us to automate common tasks in a more powerful and general way than copy-and-pasting\n![We do not copy and paste](https://imaginationoverflowsw.files.wordpress.com/2010/11/anti-copy-paste.jpg)\n\nWhat are the advantages of using *functions* ?\n\n(@) You can give a function an evocative name that makes your code easier to understand.\n(@) As requirements change, you only need to update code in one place, instead of many.\n(@) You eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another)\n\n##### We should seriously consider writing a `function` whenever we have copied and pasted a block of code more than **TWICE**\n\nThere are 3 steps to creating a new *function* ?\n\n(@) You need to pick a name for the function\n(@) You list the inputs, or arguments, to the function inside ```function```\n(@) You place the code you have developed in **body** of the function\n\n```rescale01 <- function(x) {\n  rng <- range(x, na.rm = TRUE)\n  (x - rng[1]) / (rng[2] - rng[1])\n}```\n\nMost important attribute of functions: ** WE DO NOT WANT TO REPEAT OURSELVES**\n\n## Conditional Execution\nAn ```if``` statement allows us to conditionally execute code\n```{r\nif (condition) {\n# code executed when the condition is **TRUE**\n}\nelse {\n# code executed when the condition is **FALSE**\n}\n\n```\nThe ```condition``` must evaluate to ```TRUE``` or ```FALSE```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1475481203495.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3624976242",
    "id" : "C56F4D00",
    "lastKnownWriteTime" : 1475488127,
    "last_content_update" : 1475489310292,
    "path" : "~/GitHub/R4DS_LearnigCurve/Summary/Outline.RMD",
    "project_path" : "Outline.RMD",
    "properties" : {
        "tempName" : "Untitled2"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}